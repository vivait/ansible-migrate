---
- name: Check for a previous directory and keep a reference
  shell: "[ -d '{{symfony2_project_root}}/current' ] && readlink -f '{{symfony2_project_root}}/current'"
  ignore_errors: yes
  register: current_path

- debug: msg="{{current_path}}"

- name: Check for a previous release and keep a reference
  shell: "[ -d '{{symfony2_project_root}}/previous' ] && readlink -f '{{symfony2_project_root}}/previous'"
  ignore_errors: yes
  register: previous_path
  when: symfony2_versioned_deployment|bool

- debug: msg="{{ previous_path }}"

- debug: msg="{{ symfony2_versioned_deployment }}"

- debug: msg="{{ symfony2_versioned_deployment_release_cleanup }}"

- name: Store a reference to the previous version
  file: state=link src="{{current_path.stdout}}" path={{symfony2_project_root}}/previous
  when: symfony2_versioned_deployment|bool and current_path.stdout != ''

- name: Put maintenance page live
  file: state=link src={{symfony2_maintenance_root}} path={{symfony2_project_root}}/current
  when: symfony2_versioned_deployment|bool

- name: Run migrations
  shell: "{{ migration_command }}"
  when: symfony2_run_migrations|bool and migration_command|default('') != ''

- name: Remove previous release
  file: state=absent path={{previous_path.stdout}}
  when: symfony2_versioned_deployment|bool and symfony2_versioned_deployment_release_cleanup|bool and previous_path.stdout != ''

- name: Chown directories
  file:
    path: "{{ item.path }}"
    group: "{{ item.group }}"
    owner: "{{ item.owner }}"
  with_items: "{{ symfony_versioned_deployment_chown_directories }}"

- name: Chown directories recursively
  file:
    path: "{{ item.path }}"
    group: "{{ item.group }}"
    owner: "{{ item.owner }}"
    recurse: true
  with_items: "{{ symfony_versioned_deployment_chown_directories_recursively }}"

- name: Put version live
  file: state=link src={{ symfony2_release_destination }} path={{symfony2_project_root}}/current
  when: symfony2_versioned_deployment|bool

- service: name={{item}} state=stopped
  sudo: yes
  ignore_errors: yes
  with_items: "{{ symfony2_versioned_deployment_stop_services }}"

- service: name={{item}} state=started
  sudo: yes
  ignore_errors: yes
  with_items: "{{ symfony2_versioned_deployment_start_services }}"

- service: name={{item}} state=reloaded
  sudo: yes
  with_items: "{{ symfony2_versioned_deployment_reload_services }}"

- name: Clear the opcache for CLI
  sudo: yes
  command: "cachetool opcache:reset --cli"
  when: php_opcache_enabled_in_ini|bool and php_opcache_enable_cli|bool
